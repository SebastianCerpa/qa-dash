generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model audit_logs {
  id          String    @id @default(cuid())
  user_id     String?
  action      String?
  entity_type String?
  entity_id   String?
  details     String?
  created_at  DateTime? @default(now())
  users       users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model cycles {
  id          String    @id @default(cuid())
  name        String?
  description String?
  start_date  DateTime?
  end_date    DateTime?
  created_at  DateTime? @default(now())
}

model documents {
  id          String    @id @default(cuid())
  title       String
  content     String?
  uploaded_by String?
  project_id  String?
  uploaded_at DateTime? @default(now())
  projects    projects? @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users       users?    @relation(fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model projects {
  id          String        @id @default(cuid())
  name        String
  description String?
  created_at  DateTime?     @default(now())
  updated_at  DateTime?     @default(now())
  bug_reports bug_reports[]
  documents   documents[]
  tasks       tasks[]
  test_plans  test_plans[]
}

model task_comments {
  id         String    @id @default(cuid())
  task_id    String?
  author_id  String?
  content    String
  created_at DateTime? @default(now())
  users      users?    @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tasks      tasks?    @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model tasks {
  id            String          @id @default(cuid())
  title         String
  description   String?
  status        String?         @default("to-do")
  priority      String?
  assignee_id   String?
  project_id    String?
  cycle_id      String?
  created_at    DateTime?       @default(now())
  updated_at    DateTime?       @default(now())
  task_comments task_comments[]
  users         users?          @relation(fields: [assignee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_cycles   test_cycles?    @relation(fields: [cycle_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects      projects?       @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_cases    test_cases[]
}

model teams {
  id          String       @id @default(cuid())
  name        String
  description String?
  created_at  DateTime?    @default(now())
  user_teams  user_teams[]
}

model test_cases {
  id               String            @id @default(cuid())
  test_plan_id     String?
  title            String
  description      String?
  priority         TestCasePriority  @default(MEDIUM)
  type             TestCaseType      @default(FUNCTIONAL)
  preconditions    String?
  steps            Json
  expected_result  String?
  status           TestCaseStatus    @default(NOT_EXECUTED)
  ticket_id        String?
  tags             String?
  last_executed    DateTime?
  created_by       String?
  created_at       DateTime?         @default(now())
  updated_at       DateTime?         @updatedAt
  last_executed_by String?
  users            users?            @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_plans       test_plans?       @relation(fields: [test_plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  linked_task      tasks?            @relation(fields: [ticket_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  test_executions  test_executions[]
}

model test_cycles {
  id         String    @id @default(cuid())
  name       String
  start_date DateTime?
  end_date   DateTime?
  created_by String?
  created_at DateTime? @default(now())
  tasks      tasks[]
  users      users?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model test_plans {
  id                  String       @id @default(cuid())
  title               String
  description         String?
  project_id          String?
  created_by          String?
  created_at          DateTime?    @default(now())
  acceptance_criteria String?
  deliverables        String?
  environment         String?
  objectives          String?
  resources           String?
  risk_management     String?
  schedule            String?
  scope               String?
  test_strategy       String?
  test_cases          test_cases[]
  users               users?       @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  projects            projects?    @relation(fields: [project_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_teams {
  user_id String
  team_id String
  teams   teams  @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, team_id])
}

model users {
  id             String           @id @default(cuid())
  name           String
  email          String           @unique
  role           String
  password_hash  String
  avatar_url     String?
  created_at     DateTime?        @default(now())
  status         String?          @default("active")
  audit_logs     audit_logs[]
  bug_activities bug_activities[]
  bug_comments   bug_comments[]
  assigned_bugs  bug_reports[]    @relation("BugAssignee")
  reported_bugs  bug_reports[]    @relation("BugReporter")
  documents      documents[]
  task_comments  task_comments[]
  tasks          tasks[]
  test_cases     test_cases[]
  test_cycles    test_cycles[]
  test_plans     test_plans[]
  user_teams     user_teams[]
}

model bug_reports {
  id                 String            @id @default(cuid())
  title              String
  description        String
  severity           Severity          @default(MEDIUM)
  priority           Priority          @default(MEDIUM)
  status             BugStatus         @default(OPEN)
  environment        String?
  steps_to_reproduce String?
  expected_behavior  String?
  actual_behavior    String?
  browser_info       String?
  os_info            String?
  device_info        String?
  is_regression      Boolean           @default(false)
  original_bug_id    String?
  regression_count   Int               @default(0)
  test_case_link     String?
  automation_test_id String?
  ci_pipeline_url    String?
  build_number       String?
  reporter_id        String
  assignee_id        String?
  project_id         String?
  tags               String?
  labels             String?
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  resolved_at        DateTime?
  activities         bug_activities[]
  attachments        bug_attachments[]
  comments           bug_comments[]
  assignee           users?            @relation("BugAssignee", fields: [assignee_id], references: [id])
  project            projects?         @relation(fields: [project_id], references: [id])
  reporter           users             @relation("BugReporter", fields: [reporter_id], references: [id])
  screenshots        bug_screenshots[]
  test_executions    test_executions[]
}

model bug_attachments {
  id          String      @id @default(cuid())
  bug_id      String
  file_name   String
  file_url    String
  file_size   Int
  mime_type   String
  uploaded_at DateTime    @default(now())
  uploaded_by String
  bug         bug_reports @relation(fields: [bug_id], references: [id], onDelete: Cascade)
}

model bug_screenshots {
  id          String      @id @default(cuid())
  bug_id      String
  image_url   String
  annotations Json?
  description String?
  uploaded_at DateTime    @default(now())
  bug         bug_reports @relation(fields: [bug_id], references: [id], onDelete: Cascade)
}

model bug_comments {
  id         String      @id @default(cuid())
  bug_id     String
  author_id  String
  content    String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  author     users       @relation(fields: [author_id], references: [id])
  bug        bug_reports @relation(fields: [bug_id], references: [id], onDelete: Cascade)
}

model bug_activities {
  id          String      @id @default(cuid())
  bug_id      String
  user_id     String
  action      String
  field       String?
  old_value   String?
  new_value   String?
  description String?
  created_at  DateTime    @default(now())
  bug         bug_reports @relation(fields: [bug_id], references: [id], onDelete: Cascade)
  user        users       @relation(fields: [user_id], references: [id])
}

model test_executions {
  id             String       @id @default(cuid())
  created_bug_id String?
  executed_by    String
  execution_date DateTime     @default(now())
  notes          String?
  test_case_id   String
  status         String
  created_bug    bug_reports? @relation(fields: [created_bug_id], references: [id])
  test_case      test_cases   @relation(fields: [test_case_id], references: [id], onDelete: Cascade)
}

model bug_analytics {
  id                  String   @id @default(cuid())
  date                DateTime @unique
  total_bugs          Int      @default(0)
  new_bugs            Int      @default(0)
  resolved_bugs       Int      @default(0)
  critical_bugs       Int      @default(0)
  avg_resolution_time Float?
  resolution_rate     Float?
  created_at          DateTime @default(now())
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
  BLOCKER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BugStatus {
  OPEN
  IN_PROGRESS
  TESTING
  RESOLVED
  CLOSED
  REOPENED
  DUPLICATE
  WONT_FIX
}

enum TestExecutionStatus {
  PASSED
  FAILED
  SKIPPED
  FLAKY
}

enum TestCasePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TestCaseType {
  FUNCTIONAL
  INTEGRATION
  PERFORMANCE
  SECURITY
  USABILITY
  REGRESSION
}

enum TestCaseStatus {
  NOT_EXECUTED
  PASSED
  FAILED
  BLOCKED
  SKIPPED
  IN_PROGRESS
}
